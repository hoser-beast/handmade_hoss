`subst` helps in the case of moving files and folders around, the path can still be accessible by changing the subst'd directory.

	subst <drive_letter>: <directory_path>

i.e., `subst w: %USERPROFILE%\Documents\Cloud\handmade_hoss`



The use of { and } inside a case branch is useful for scoping variables within a branch:

switch(x)
{
	case 1:
	{
		int i = 45;
		break;
	}
	case 2:
	{
		i = 23; // Error, `i` is undefined here.
		break;
	}
}


Static variables are tremendously useful for the purpose of debugging, however, they probably should never be used in code that is shipped.
They create nightmares for things like thread safety, etc.

The custom decorators we made for the overloaded term `static` (i.e., `#define local_persist static`) not only is useful in classifying their use, they are also helpful for searching variables (i.e., `local_persist`) that are statically defined in case we wish to remove them.

Global variables are always initialized to zero.




GetMessageA() blocks when we run out of messages. It will wait until another message comes to the queue, do other things, switch to other processes, etc. to use that CPU time effectively.

Advantage of 0 vs NULL: using 0 requires less defines.

malloc() vs VirtualAlloc(): malloc goes through a crapload of C runtime library code, then call HeapAlloc, then eventually run VirtualAlloc.



One we start using WM_SYSKEYDOWN et al, DefWindowProc() no longer handles key sequences like Alt+F4 and we must handle them ourselves.

The reason for having `b32` for a 32-bit boolean value, is that we intend that the value will either be zero or non-zero and don't really care about it being a zero or one. This has performance implications because the compiler has to determine if any bits are set and if so, convert it to one. For example, let's say after some bitwise manipulation, we have 0b0010_1000. This will need to be converted to 0b0000_0001.

At least some versions of XInput have a bug that causes a significant stall (several milliseconds) when checking XInputGetState on controller indexes where there is no controller plugged in.
A better way would be to monitor HID notifications when devices are plugged and unplugged and only poll those devices.

Direct sound can't be loaded until we have a window open.



At some point, we hope to remove the C library math functions.

Modern computers have a lot of horsepower to compute floating point. Floating point operations on older machines was very expensive without floating point units. Fixed point was used instead but was still computationally expensive.
It's very rare that operations with doubles can be as fast as floats due in part to SIMD.



RDTSC (Read Time-Stamp Counter) x86_64 instruction provides the amount of cycles
of work.

QueryPerformanceCounter() is a Windows high-resolution (<1Î¼s) performance
counter in real-world ("wallclock") time.

QueryPerformanceFrequency queries how many increments the clock goes through in
one second. The frequency is fixed at system boot and is consistent across all
processors. We can query it once upon initialization and store the result.

The reason for not putting a "begin counter" at the start of the loop and the
"end counter" at the end of the loop is because it may not take into
consideration the time to return to the top of the loop or the process got
switched out, etc. We want to guarantee not missing any time.

Functions like wsprintf() are unsafe and Casey does not like to use them in code
that he ships to the end user.